"""
Django settings for gen_random_pwd_dj3 project.

Generated by 'django-admin startproject' using Django 3.2.14.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('DJANGO_SECRET_KEY', 'django-insecure-dzacq!xc5dwm65x4yv%j!bpnufnas#k+8i9*hbp(cjh&2$$(#1')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DJANGO_DEBUG', True)

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'generate_password',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'gen_random_pwd_dj3.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'gen_random_pwd_dj3.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# 这是老的方法
# STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
# 这是新的方法
STATICFILES_DIRS = [
    BASE_DIR / 'static',
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# 日志配置

# BASE_LOG_DIR = os.path.join(BASE_DIR, 'logs')
BASE_LOG_DIR = BASE_DIR / 'logs'

# exist_ok = True 用于避免目录已经存在引发FileExistsError错误
if not os.path.exists(BASE_LOG_DIR):
    os.makedirs(BASE_LOG_DIR, exist_ok=True)

# 定义两种日志格式
standard_format = '[%(asctime)s] - [%(levelname)s] - [%(threadName)s:%(thread)d] ' \
                  '- [task_id:%(name)s] - [%(filename)s:%(lineno)d] - [%(funcName)s]: %(message)s'

simple_format = '[%(asctime)s] - [%(levelname)s] - [%(filename)s:%(lineno)d] ' \
                '- [%(funcName)s]: %(message)s'

# 默认日志文件名
DEFAULT_LOG_FILENAME = os.path.join(BASE_LOG_DIR, 'default.log')
ACCESS_LOG_FILENAME = os.path.join(BASE_LOG_DIR, 'access.log')
TIMED_ACCESS_LOG_FILENAME = os.path.join(BASE_LOG_DIR, 'access_timed.log')

# 日志字典配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'standard': {
            'format': standard_format,
        },
        'simple': {
            'format': simple_format,
        }
    },
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'handlers': {
        'console': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'DEBUG'),
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'access_file': {  # 使用 RotatingFileHandler
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'class': 'logging.handlers.RotatingFileHandler',
            'formatter': 'standard',
            'filename': ACCESS_LOG_FILENAME,
            'maxBytes': 1024 * 1024 * 500,  # 日志大小为 单个文件 500MB
            'backupCount': 10,
            'encoding': 'utf-8'
        },
        'access_timed_file': {  # 使用 TimedRotatingFileHandler
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'formatter': 'standard',
            'filename': TIMED_ACCESS_LOG_FILENAME,
            # 'when': 'midnight',
            'when': 'D',
            'interval': 1,
            'delay': False,
            'backupCount': 10,
            'encoding': 'utf-8'
        },
        'mail_admins': {
            'level': os.getenv('DJANGO_LOG_LEVEL', 'INFO'),
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false']
        },
    },
    'loggers': {
        '': {   # logger = logging.getLogger(__name__) 使用的就是这个默认logger
            'handlers': ['access_file', 'console'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'console_log': {
            'handlers': ['console', ],
            'level': 'DEBUG',
            'propagate': False,
        },
        'access_log': {
            # 'handlers': ['access_file', 'access_timed_file', 'console'],
            'handlers': ['access_file', ],
            'level': 'INFO',
            'propagate': False,
        },
    }
}
